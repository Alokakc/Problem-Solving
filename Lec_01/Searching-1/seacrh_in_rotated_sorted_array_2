class seacrh_in_rotated_sorted_array_2 {

    public boolean search(int[] nums, int target) {
        int start=0, end=nums.length-1, mid=0;
        while(start<=end){
           mid = (start+end)/2;
            if(target==nums[mid]) return true;
            /*all code is same as seacrh_in_rotated_sorted_array but due to duplicate element this 
            this might not work for the given testcase
            nums = [2,3,4,5,2,2,2,2,2] and target = 3, this will false answer but the answer is true
            that code can't figure out which is the sorted part of the array
            */ 
            

            //this condition will eliminate problem and help to find out the sorted part of the array
            if(nums[mid]==nums[start] && nums[mid] == nums[end]) {
                start++;
                end--;
            }
            else if(nums[start]<=nums[mid]){
               if(target>=nums[start] && target<nums[mid]){
                   end = mid-1;
               }
               else start = mid+1;
            }
            else{
               if(target<=nums[end] && target>nums[mid]) start = mid+1;
               else end = mid-1;
            }
        }
        return false;
    }

}